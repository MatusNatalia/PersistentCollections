package ru.nsu.util;

/**
 * Персистентный ассоциативный массив
 * @param <K> тип ключа
 * @param <V> тип значения
 */
public interface PersistentMap<K, V> {

    /**
     * Возвращает размер текущей версии ассоциативного массива
     * @return размер текущей версии ассоциативного массива
     */
    int size();

    /**
     * Возвращает размер указанной версии ассоциативного массива
     * @param version версия ассоциативного массива
     * @return размер указанной версии ассоциативного массива
     */
    int size(int version);

    /**
     * Проверяет, что текущая версия ассоциативного массива пуста
     * @return true, если текущая версия ассоциативного массива пуста
     */
    boolean isEmpty();

    /**
     * Проверяет, что указанная версия ассоциативного массива пуста
     * @param version версия ассоциативного массива
     * @return true, если указанная версия ассоциативного массива пуста
     */
    boolean isEmpty(int version);

    /**
     * Проверяет, что текущая версия ассоциативного массива содержит указанный элемент в качестве ключа
     * @param key элемент
     * @return true, если текущая версия ассоциативного массива содержит указанный элемент в качестве ключа
     */
    boolean containsKey(Object key);

    /**
     * Проверяет, что указанная версия ассоциативного массива содержит указанный элемент в качестве ключа
     * @param key элемент
     * @param version версия ассоциативного массива
     * @return true, если указанная версия ассоциативного массива содержит указанный элемент в качестве ключа
     */
    boolean containsKey(Object key, int version);

    /**
     * Проверяет, что текущая версия ассоциативного массива содержит указанный элемент в качестве значения
     * @param value элемент
     * @return true, если текущая версия ассоциативного массива содержит указанный элемент в качестве значения
     */
    boolean containsValue(Object value);

    /**
     * Проверяет, что указанная версия ассоциативного массива содержит указанный элемент в качестве значения
     * @param value элемент
     * @param version версия ассоциативного массива
     * @return true, если указанная версия ассоциативного массива содержит указанный элемент в качестве значения
     */
    boolean containsValue(Object value, int version);

    /**
     * Возвращает значение по ключу из текущей версии ассоциативного массива
     * @param key ключ
     * @return значение по ключу из текущей версии ассоциативного массива
     */
    V get(Object key);

    /**
     * Возвращает значение по ключу из указанной версии ассоциативного массива
     * @param key ключ
     * @param version версия ассоциативного массива
     * @return значение по ключу из указанной версии ассоциативного массива
     */
    V get(Object key, int version);

    /**
     * Изменяет значение по ключу из текущей версии ассоциативного массива
     * @param key ключ
     * @return true, если значение было изменено
     */
//    boolean set(Object key, V value);
//
//    /**
//     * Изменяет значение по ключу из указанной версии ассоциативного массива
//     * @param key ключ
//     * @param version версия ассоциативного массива
//     * @return true, если значение было изменено
//     */
//    boolean set(Object key, V value, int version);

    /**
     * Добавляет значение по ключу в текущую версию ассоциативного массива
     * @param key ключ
     * @param value значение
     * @return значение по ключу {@code key} из предыдущей версии ассоциативного массива
     * или {@code null}, если по ключу {@code key} не было значения
     */
    V put(K key, V value);

    /**
     * Добавляет значение по ключу в указанную версию ассоциативного массива
     * @param key ключ
     * @param value значение
     * @param version версия ассоциативного массива
     * @return значение по ключу {@code key} из предыдущей версии ассоциативного массива
     * или {@code null}, если по ключу {@code key} не было значения
     */
    V put(K key, V value, int version);

    /**
     * Удаляет элемент по индексу из текущей версии ассоциативного массива
     * @param key ключ
     * @return значение по ключу {@code key} из прерыдущей версии ассоциативного массива
     * или {@code null}, если по ключу {@code key} не было значения
     */
    V remove(Object key);

    /**
     * Удаляет значение по ключу из указанной версии ассоциативного массива
     * @param key ключ
     * @param version версия ассоциативного массива
     * @return значение по ключу {@code key} из предыдущей версии ассоциативного массива
     * или {@code null}, если по ключу {@code key} не было значения
     */
    V remove(Object key, int version);

    /**
     * "Зануляет" текущую версию ассоциативного массива
     * @return true, если текущая версия ассоциативного массива была успешно "занулена"
     */
    boolean clear();

    /**
     * "Зануляет" указанную версию ассоциативного массива
     * @param version версия ассоциативного массива
     * @return true, если указанная версия ассоциативного массива была успешно "занулена"
     */
    boolean clear(int version);

    /**
     * Проверяет, что указанный элемент равен текущему
     * @param o элемент
     * @return true, если указанный элемент равен текущему
     */
    boolean equals(Object o);

    /**
     * Возвращает строковое представление текущей версии ассоциативного массива
     * @return строковое представление текущей версии ассоциативного массива
     */
    String toString();

    /**
     * Возвращает строковое представление указанной версии ассоциативного массива
     * @param version версия ассоциативного массива
     * @return строковое представление указанной версии ассоциативного массива
     */
    String toString(int version);

}
